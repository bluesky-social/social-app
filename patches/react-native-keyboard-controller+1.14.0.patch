diff --git a/node_modules/react-native-keyboard-controller/lib/typescript/animated.d.ts b/node_modules/react-native-keyboard-controller/lib/typescript/animated.d.ts
index 662dfff..e6eb9aa 100644
--- a/node_modules/react-native-keyboard-controller/lib/typescript/animated.d.ts
+++ b/node_modules/react-native-keyboard-controller/lib/typescript/animated.d.ts
@@ -25,7 +25,7 @@ type KeyboardProviderProps = {
      * To change the property in runtime use `useKeyboardController` hook and `setEnabled` method.
      * Defaults to `true`.
      */
-    enabled?: boolean;
+    enabled_PATCHED?: boolean;
 };
 export declare const KeyboardProvider: ({ children, statusBarTranslucent, navigationBarTranslucent, enabled: initiallyEnabled, }: KeyboardProviderProps) => React.JSX.Element;
 export {};
diff --git a/node_modules/react-native-keyboard-controller/src/animated.tsx b/node_modules/react-native-keyboard-controller/src/animated.tsx
index d742c1d..7da4707 100644
--- a/node_modules/react-native-keyboard-controller/src/animated.tsx
+++ b/node_modules/react-native-keyboard-controller/src/animated.tsx
@@ -63,12 +63,10 @@ type KeyboardProviderProps = {
    */
   navigationBarTranslucent?: boolean;
   /**
-   * A boolean prop indicating whether the module is enabled. It indicate only initial state,
-   * i. e. if you try to change this prop after component mount it will not have any effect.
-   * To change the property in runtime use `useKeyboardController` hook and `setEnabled` method.
+   * A boolean prop indicating whether the module is enabled.
    * Defaults to `true`.
    */
-  enabled?: boolean;
+  enabled_PATCHED?: boolean;
 };
 
 // capture `Platform.OS` in separate variable to avoid deep workletization of entire RN package
@@ -79,12 +77,10 @@ export const KeyboardProvider = ({
   children,
   statusBarTranslucent,
   navigationBarTranslucent,
-  enabled: initiallyEnabled = true,
+  enabled_PATCHED = true,
 }: KeyboardProviderProps) => {
   // ref
   const viewTagRef = useRef<React.Component<KeyboardControllerProps>>(null);
-  // state
-  const [enabled, setEnabled] = useState(initiallyEnabled);
   // animated values
   const progress = useAnimatedValue(0);
   const height = useAnimatedValue(0);
@@ -103,15 +99,19 @@ export const KeyboardProvider = ({
   // memo
   const context = useMemo<KeyboardAnimationContext>(
     () => ({
-      enabled,
+      enabled: enabled_PATCHED,
       animated: { progress: progress, height: Animated.multiply(height, -1) },
       reanimated: { progress: progressSV, height: heightSV },
       layout,
       setKeyboardHandlers,
       setInputHandlers,
-      setEnabled,
+      setEnabled: () => {
+        if (__DEV__) {
+          console.error('Do not useKeyboardController, instead change the `enabled` prop on the provider')
+        }
+      },
     }),
-    [enabled],
+    [enabled_PATCHED],
   );
   const style = useMemo(
     () => [
@@ -182,18 +182,18 @@ export const KeyboardProvider = ({
 
   // effects
   useEffect(() => {
-    if (enabled) {
+    if (enabled_PATCHED) {
       applyMonkeyPatch();
     } else {
       revertMonkeyPatch();
     }
-  }, [enabled]);
+  }, [enabled_PATCHED]);
 
   return (
     <KeyboardContext.Provider value={context}>
       <KeyboardControllerViewAnimated
         ref={viewTagRef}
-        enabled={enabled}
+        enabled={enabled_PATCHED}
         navigationBarTranslucent={navigationBarTranslucent}
         statusBarTranslucent={statusBarTranslucent}
         style={styles.container}
